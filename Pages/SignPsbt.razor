@page "/signpsbt"
@using Microsoft.JSInterop
@inject IJSRuntime JS

<h3 class="header">Sign PSBT</h3>

<div class="input-section">
    <InputText @bind-Value="psbt" placeholder="Enter PSBT" class="input-text" />
    <button class="sign-button" @onclick="() => SignPsbtFunc(psbt)">Sign PSBT</button>
</div>

<div class="psbt-text-container">
    <p class="psbt-text">
        To run the tests given below please ensure:
        <ul>
            <li>Blockcore wallet is installed</li>
            <li>You have logged in with the correct wallet</li>
        </ul>
        Please refer to the following <a href="https://docs.google.com/document/d/1we2a26ezo914LcbEMVe4V8Fwl2zK2194si_6yL4Wd8E/edit?usp=sharing" target="_blank">document</a> to find relevant keys for tests.
    </p>
</div>


@foreach (var (text, index) in hardcodedTexts.Select((text, index) => (text, index)))
{
    <div class="hardcoded-item">
        <p class="hardcoded-label">Test @(@index + 1)</p>
        <p class="hardcoded-text">@text</p>
        <button class="sign-button" @onclick="() => SignPsbtFunc(text)">Sign PSBT</button>
    </div>
}


@if (!string.IsNullOrEmpty(signedPsbt))
{
    <div class="signed-psbt">
        <p>Signed PSBT:</p>
        <textarea class="signed-psbt-value" readonly>@signedPsbt</textarea>
        <button class="copy-button" @onclick="CopyToClipboard">Copy</button>
    </div>
}

@code {
    private string psbt = string.Empty;
    private string signedPsbt = string.Empty;
    private List<string> hardcodedTexts = new List<string>
    {
        "70736274ff01005202000000016000472e4aba1fe4b6b78f338b53a6e951e02525b614974d8b4a283de3b160ce0100000000ffffffff01640000000000000016001476e64e78f8c07aee0ac4c54332f2f956951ab3a700000000000100e402000000000101972b9ae52b10e40725beecc89ffbc72bf4426d45390a6f6dc5bc2fd88963dd1c0100000000fdffffff02cec9bd19000000001976a91422e046d35a93d27db82884981ccd74820f69f33f88ac183a0000000000001976a9146aa33cab980665832015493fb2c643b775c5314a88ac0247304402202f476735a2166c25ece8442917f2c9c94c6557b1339b0c97f84be2bd10b45b1a02203fe52924cd701423ff2b5ce2cd28f8005879a9741ff76a34ffcdddb9974878dc012102b360039b742b0d08d5b798d88d1981d2399cf43efbace675a206a136f61ed933aadd2b00220603610f58a87b22c4dd00f61a6d033256392ddce2107ba8a9ab9f66f6f4992b6a3718ee612c042c000080010000800000008000000000000000000000",
        "70736274ff01007b020000000258e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffffd1748dc5f75e708db23b08a852ef652c99c0ff3b4c1d6ab23aeed49fd0ad99290100000000ffffffff01e803000000000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f000000800000008001000080000100e10200000000010197ad5142d4b313e39d06320d52aa608c06525dd3aad59f3033306cc7dae20ecc0100000000fdffffff02322400000000000016001476e64e78f8c07aee0ac4c54332f2f956951ab3a758020000000000001976a9146aa33cab980665832015493fb2c643b775c5314a88ac0247304402202cdc1dc23d2612ad0247a4c7a982c6e630c1f1fe56123afd2690c820748c5cfb022043cac7f06e432ff7e8ccbe4618235ade8bafaaa4c2554ddf36ba082a5514ada10121021949b0cf5580d50848bec7723f8b12c9a5568bf8a7dab8ea1520addcdc7a47f4bddd2b00220603610f58a87b22c4dd00f61a6d033256392ddce2107ba8a9ab9f66f6f4992b6a3718ee612c042c000080010000800000008000000000000000000000",
        "70736274ff0100a4020000000358e87a21b56daf0c23be8e7070456c336f7cbaa5c8757924f545887bb2abdd750000000000ffffffff6000472e4aba1fe4b6b78f338b53a6e951e02525b614974d8b4a283de3b160ce0100000000ffffffffd1748dc5f75e708db23b08a852ef652c99c0ff3b4c1d6ab23aeed49fd0ad99290100000000ffffffff011027000000000000160014d85c2b71d0060b09c9886aeb815e50991dda124d00000000000100bb0200000001aad73931018bd25f84ae400b68848be09db706eac2ac18298babee71ab656f8b0000000048473044022058f6fc7c6a33e1b31548d481c826c015bd30135aad42cd67790dab66d2ad243b02204a1ced2604c6735b6393e5b41691dd78b00f0c5942fb9f751856faa938157dba01feffffff0280f0fa020000000017a9140fb9463421696b82c833af241c78c17ddbde493487d0f20a270100000017a91429ca74f8a08f81999428185c97b5d852e4063f6187650000000104475221029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f2102dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d752ae2206029583bf39ae0a609747ad199addd634fa6108559d6c5cd39b4c2183f1ab96e07f10d90c6a4f000000800000008000000080220602dab61ff49a14db6a7d02b0cd1fbb78fc4b18312b5b4e54dae4dba2fbfef536d710d90c6a4f000000800000008001000080000100e402000000000101972b9ae52b10e40725beecc89ffbc72bf4426d45390a6f6dc5bc2fd88963dd1c0100000000fdffffff02cec9bd19000000001976a91422e046d35a93d27db82884981ccd74820f69f33f88ac183a0000000000001976a9146aa33cab980665832015493fb2c643b775c5314a88ac0247304402202f476735a2166c25ece8442917f2c9c94c6557b1339b0c97f84be2bd10b45b1a02203fe52924cd701423ff2b5ce2cd28f8005879a9741ff76a34ffcdddb9974878dc012102b360039b742b0d08d5b798d88d1981d2399cf43efbace675a206a136f61ed933aadd2b00220603610f58a87b22c4dd00f61a6d033256392ddce2107ba8a9ab9f66f6f4992b6a3718ee612c042c00008001000080000000800000000000000000000100e10200000000010197ad5142d4b313e39d06320d52aa608c06525dd3aad59f3033306cc7dae20ecc0100000000fdffffff02322400000000000016001476e64e78f8c07aee0ac4c54332f2f956951ab3a758020000000000001976a9146aa33cab980665832015493fb2c643b775c5314a88ac0247304402202cdc1dc23d2612ad0247a4c7a982c6e630c1f1fe56123afd2690c820748c5cfb022043cac7f06e432ff7e8ccbe4618235ade8bafaaa4c2554ddf36ba082a5514ada10121021949b0cf5580d50848bec7723f8b12c9a5568bf8a7dab8ea1520addcdc7a47f4bddd2b00220603610f58a87b22c4dd00f61a6d033256392ddce2107ba8a9ab9f66f6f4992b6a3718ee612c042c000080010000800000008000000000000000000000",
        // Add more hardcoded strings as needed
    };

    private async Task SignPsbtFunc(string text)
    {
        signedPsbt = await JS.InvokeAsync<string>("walletFunctions.SignPsbt", text);
    }
    private async Task CopyToClipboard()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", signedPsbt);
    }
}
